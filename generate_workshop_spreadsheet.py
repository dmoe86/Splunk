#!/usr/bin/env python3

# Author: Brandon Blinderman
# Email: bblinderman@splunk.com
# Date: 2023-02-16

import argparse
import csv
import json
import sys
from time import sleep

argparser = argparse.ArgumentParser()
argparser.add_argument(
    "-m",
    "--members",
    help="Text file containing email addresses, one per line. Default: 'members.txt'",
    default="members.txt",
)
argparser.add_argument(
    "-ip", "--ips", help="Text file containing EC2 IP addresses, one per line"
)
argparser.add_argument(
    "-r",
    "--realm",
    help="Splunk/SignalFX realm. Default: us1",
    required=False,
    default="us1",
)
argparser.add_argument(
    "-p",
    "--password",
    help="The EC2 instance password, randomly generated by Terraform.",
    required=True,
)

argparser.description = (
    "Generate a CSV file of attendees for the Splunk Observability Workshop"
)

args = argparser.parse_args()

email_list = args.members
ec2_ips = args.ips
sfx_realm = args.realm
ec2_password = args.password


def sort_emails(email_list):
    """import 'members.txt', put into a list, and sort alphabetically"""
    with open(email_list, encoding="utf-8") as f:
        emails = f.read().splitlines()
        emails.sort()
        # remove empty lines and commas and trailing spaces
        emails = [email for email in emails if email]
        emails = [email.replace(",", "") for email in emails]
        emails = [email.strip() for email in emails]
    return emails


def ExtractNames():
    """extract names/usernames from emails"""
    users = []
    for email in emails:
        users.append(email.split("@")[0])
    return users

    # Separate first and last names and capitalize
    # first_names = []
    # last_names = []
    # for name in names:
    #     first_names.append(name.split('.')[0].capitalize())
    #     last_names.append(name.split('.')[1].capitalize())

    # # full names
    # full_names = []
    # for i in range(len(first_names)):
    #     full_names.append(first_names[i] + ' ' + last_names[i])
    # return full_names


def IPaddresses():
    """import json file containing EC2 IPs"""
    IPs = []
    with open(ec2_ips, encoding="utf-8") as f:
        IPs = json.load(f)
        IPs.sort()
    return IPs


def WriteCSV():
    """writes CSV file using 'members.txt' and 'ec2_ips.json'"""
    with open("Workshop_Attendees.csv", "w", encoding="utf-8") as f:
        writer = csv.writer(f)
        writer.writerow(
            [
                "User",
                "Email",
                "IP address (EC2)",
                "SSH Info",
                "Password",
                "Browser Access",
                "Splunk Observability URL",
            ]
        )
        try:
            for i in enumerate(users):
                writer.writerow(
                    [
                        users[i[0]],
                        emails[i[0]],
                        IPs[i[0]],
                        "ssh ubuntu@" + IPs[i[0]],
                        ec2_password,
                        "http://" + IPs[i[0]] + ":6501",
                        f"https://app.{sfx_realm}.signalfx.com",
                    ]
                )
        except IndexError:
            extra_users = len(users) - len(IPs)
            if extra_users > 0:
                for i in range(extra_users):
                    writer.writerow(
                        [
                            users[-1],
                            emails[-1],
                            "",
                            "",
                            "",
                            "",
                            "",
                        ]
                    )
                    users.pop()
                    emails.pop()

        # Accounting for the remaining IPs
        extra_IPs = len(IPs) - len(emails)
        if extra_IPs > 0:
            # add extra IPs to the end of the list
            for i in range(extra_IPs):
                writer.writerow(
                    [
                        "",
                        "",
                        IPs[-1],
                        f"ssh ubuntu@{IPs[-1]}",
                        ec2_password,
                        f"http://{IPs[-1]}:6501",
                        f"https://app.{sfx_realm}.signalfx.com",
                    ]
                )
                IPs.pop()


if __name__ == "__main__":
    if not args.ips:
        argparser.print_help()
        sys.exit(1)
    else:
        emails = sort_emails(email_list)
        IPs = IPaddresses()
        users = ExtractNames()

        print(f"Generating CSV file for {len(emails)} attendees...")
        sleep(1)
        WriteCSV()
        print(f"CSV file saved to: {sys.path[0]}/Workshop_Attendees.csv")
